class Solution {
    public String longestDiverseString(int a, int b, int c) {
        StringBuilder result = new StringBuilder();
        Map<Character, Integer> freqMap = new HashMap<>();
        if (a > 0) freqMap.put('a', a);
        if (b > 0) freqMap.put('b', b);
        if (c > 0) freqMap.put('c', c);

        PriorityQueue<Map.Entry<Character, Integer>> maxHeap =
            new PriorityQueue<>((x, y) -> y.getValue() - x.getValue());
        maxHeap.addAll(freqMap.entrySet());

        while (!maxHeap.isEmpty()) {
            Map.Entry<Character, Integer> current = maxHeap.poll();
            int len = result.length();

            if (len >= 2 && result.charAt(len - 1) == current.getKey() && result.charAt(len - 2) == current.getKey()) {
                Map.Entry<Character, Integer> next = maxHeap.poll();
                if (next == null) break;
                result.append(next.getKey());
                next.setValue(next.getValue() - 1);
                if (next.getValue() > 0) maxHeap.offer(next);
                maxHeap.offer(current);
            } else {
                result.append(current.getKey());
                current.setValue(current.getValue() - 1);
                if (current.getValue() > 0) maxHeap.offer(current);
            }
        }
        return result.toString();
    }
}
