/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int prorderIndex = 0;
    private Map<Integer, Integer> inorderMap;

    public TreeNode buildTree(int[] preorder, int[] inorder) {

        inorderMap = new HashMap<>();
        for(int i=0; i<inorder.length; i++){
            inorderMap.put(inorder[i],i);
        }

        return build(preorder, 0, inorder.length-1);
    }

    private TreeNode build(int[] preorder, int startIndex, int endIndex) {
        if(startIndex > endIndex) {
            return null;
        }

        int root = preorder[prorderIndex++];
        TreeNode rootNode = new TreeNode(root);
        int rootIndex = inorderMap.get(root);

        rootNode.left = build(preorder, startIndex, rootIndex - 1);
        rootNode.right = build(preorder, rootIndex + 1, endIndex);

        return rootNode;
    }
}