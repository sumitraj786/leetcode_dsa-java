#Logic:
starting from root, try checking if val>temp.val then insert at temp.right if its empty else move temp to temp.right., same for left if val<temp.val and temp.left is empty then insert the node els move temp=temp.left.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode temp = root;
        TreeNode newNode = new TreeNode(val);

        if(root == null) {
            root =newNode;
        }

        while(temp != null) {
            if(val >temp.val) {
                if(temp.right == null) {
                    temp.right = newNode;
                    break;
                } else {
                    temp = temp.right;
                }
            } else {
                if(temp.left == null) {
                    temp.left = newNode;
                    break;
                } else {
                    temp = temp.left;
                }
            }
        }

        return root;
    }
}