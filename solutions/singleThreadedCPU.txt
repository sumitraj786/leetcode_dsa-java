class Solution {
    public int[] getOrder(int[][] tasks) {
        int n = tasks.length;
        int[][] newTasks = new int[n][3];

        for(int i = 0; i < n; i++) {
            newTasks[i][0] = tasks[i][0];
            newTasks[i][1] = tasks[i][1];
            newTasks[i][2] = i;
        }

        Arrays.sort(newTasks, (a,b) -> a[0] - b[0]);

        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[1] == b[1] ? a[2] - b[2] : a[1] - b[1]);
        int time = 0, i =0 ,idx = 0;
        int[] result = new int[n];

        while (i < n || !pq.isEmpty()) {
           
            while (i < n && newTasks[i][0] <= time) {
                pq.offer(newTasks[i++]);
            }

            if (pq.isEmpty()) {
                // if CPU idle â†’ jump to next available task
                time = newTasks[i][0];
                continue;
            }

            int[] curr = pq.poll();
            result[idx++] = curr[2];  // store index of executed task
            time += curr[1];          // increment time by processing time
        }

        return result;
    }
}