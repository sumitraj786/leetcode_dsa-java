class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];

        backtrack(result, nums, new ArrayList<>(), used);

        return result;
    }

    private void backtrack(List<List<Integer>> result, int[] nums, List<Integer> currentPath, boolean[] used) {

        if(currentPath.size() == nums.length) {
            result.add(new ArrayList<>(currentPath));
            return;
        }

        for(int i = 0; i < nums.length; i++) {
            
            if(used[i]) continue;
            if(i > 0 && nums[i - 1] == nums[i] && !used[i - 1]) continue;
            
            currentPath.add(nums[i]);
            used[i] = true;
            backtrack(result, nums, currentPath, used);
            currentPath.remove(currentPath.size() - 1);
            used[i] = false;
        }
    }
}