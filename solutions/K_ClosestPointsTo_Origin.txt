class Solution {
    public int[][] kClosest(int[][] points, int k) {
        // Max-heap storing [distance, index]
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            (a, b) -> b[0] - a[0]  // sort by distance (descending)
        );

        for (int i = 0; i < points.length; i++) {
            int[] current = points[i];
            int dist = current[0]*current[0] + current[1]*current[1]; // squared distance
            pq.offer(new int[]{dist, i});  // push [distance, index]

            if (pq.size() > k) {
                pq.poll(); // remove farthest point
            }
        }

        // build result
        int[][] result = new int[k][2];
        for (int i = 0; i < k; i++) {
            int index = pq.poll()[1];
            result[i] = points[index];
        }

        return result;
    }
}
