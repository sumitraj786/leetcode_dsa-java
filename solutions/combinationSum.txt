class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> combinations = new ArrayList<>();

        backtrack(candidates, target, new ArrayList<>(), 0, combinations);

        return combinations;
    }

    private void backtrack(int[] candidates, int target, List<Integer> currentComb, int index, List<List<Integer>> comb) {
        if(target == 0) {
            comb.add(new ArrayList<>(currentComb));
            return;
        }

        if(target < 0 || index == candidates.length) {
            return;
        }

        //include the current element
        currentComb.add(candidates[index]);
        backtrack(candidates, target - candidates[index], currentComb, index, comb);

        //exclude the current element
        currentComb.remove(currentComb.size() - 1);
        backtrack(candidates, target, currentComb, index + 1, comb);
    }
}